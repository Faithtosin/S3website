AWSTemplateFormatVersion: 2010-09-09
Description: CI/CD pipeline for GitHub projects
Parameters:
  ENV:
    Type: String
    Default: develop
    AllowedValues:
      - develop
      - preprd
      - prod

  CodeBuildEnvironmentImage:
    Type: String
    Default: 'aws/codebuild/standard:4.0'
    
Mappings:
  UiBucket:
    name:
      develop: ui-bucket-dev
      preprd: ui-bucket-preprd
      prod: ui-bucket-prod

Resources:
  #Angular build artifact bucket
  AngularAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [UiBucket, name, !Ref ENV]
      VersioningConfiguration: 
        Status: Enabled
      LifecycleConfiguration: 
        Rules: 
          - Id: DeleteOldVersionRule
            Status: Enabled
            NoncurrentVersionExpirationInDays: '30'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  
  #Bucket Policy
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: [AngularAppBucket]
    Properties:
      Bucket: !Ref AngularAppBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Sub 
              - arn:aws:s3:::${AngularAppBucketName}/*
              - { AngularAppBucketName: !Ref AngularAppBucket }
            Principal: '*'

  #Cloudfront  Resource 
  myDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: [AngularAppBucket]
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Select [2, !Split ["/", !GetAtt AngularAppBucket.WebsiteURL]]
          Id: uiS3Origin
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        Comment: cloudfront linked to uibucket angular website
        DefaultRootObject: index.html
        # Logging:
        #   IncludeCookies: 'false'
        #   Bucket: mylogs.s3.amazonaws.com
        #   Prefix: myprefix
        # Aliases:
        # - mysite.example.com
        # - yoursite.example.com
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: uiS3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          # TrustedSigners:
          # - 1234567890EX
          # - 1234567891EX
          ViewerProtocolPolicy: allow-all
        # PriceClass: PriceClass_200
        # Restrictions:
        #   GeoRestriction:
        #     RestrictionType: whitelist
        #     Locations:
        #     - AQ
        #     - CV
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
  

  #Codebuild Role
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: 1
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:FilterLogEvents'
                  - 'logs:GetLogEvents'
                Resource:
                  - '*'
              - Sid: 2
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:CreateBucket'
                  - 's3:List*'
                  - 's3:PutObjectAcl'
                  - 's3:DeleteObject'
                Resource:
                  - '*'
              - Sid: 3
                Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:PutImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:InitiateLayerUpload'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSecurityGroupReferences'
                  - 'ec2:DescribeStaleSecurityGroups'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:CreateNetworkInterfacePermission'
                Resource:
                  - '*'
              - Sid: 4
                Effect: Allow
                Action:
                  - 'iam:AddRoleToInstanceProfile'
                  - 'iam:AttachRolePolicy'
                  - 'iam:CreateInstanceProfile'
                  - 'iam:CreatePolicy'
                  - 'iam:CreateRole'
                  - 'iam:GetRole'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:ListPolicies'
                  - 'iam:ListRoles'
                  - 'iam:PassRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:UpdateAssumeRolePolicy'
                Resource:
                  - '*'
              - Sid: 5
                Effect: Allow
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:ReEncrypt*'
                  - 'kms:GenerateDataKey*'
                  - 'kms:DescribeKey'
                Resource:
                  - '*'

  #CodeBuild Project
  CodeBuildProjectDeploy:  
    Type: 'AWS::CodeBuild::Project'
    DependsOn: [AngularAppBucket]
    Properties:
      Name: !Sub 'codebuild-${AWS::StackName}'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildEnvironmentImage
        EnvironmentVariables:
          - Name: UiBucket_name
            Value: !FindInMap [UiBucket, name, !Ref ENV]

  
  


  
Outputs:
  BucketURL:
    Value: !GetAtt [AngularAppBucket, WebsiteURL]
    Description: URL of the Angular website to browse
  CloudfrontURL:
    Value: !GetAtt [myDistribution, DomainName]
    Description: URL of the Angular website to browse